#!/usr/bin/octave -qfif (nargin!=3)printf("Usage: multinomial_suavizado_competicion.m <data_filename> <init> <fin>");exit(1);endarglist=argv();datafile=arglist{1};init = str2num(arglist{2});fin = str2num(arglist{3});disp("Loading data...");load(datafile);disp("Data load complete.");#te=testDATA; #test AQUI PONES EL NOMBRE DE LA MATRIZ data de test#tr=trainDATA;   #train AQUI PONES EL NOMBRE DE LA MATRIZ data de train[nrows,ncols]=size(tr);trData = tr(:,1:ncols-1); #matriz trainDatatrLabels = tr(:,ncols); #vector de clases trainingHam = find(trLabels ==  0);  #vectores HAMSpam = find(trLabels ==  1); #vectores SPAMtestData = te(:,1:ncols-1); #matriz testDatatestLabels = te(:,ncols); #vector de clases test#Calculamos las prioris realizando un conteoPrioriHam = length(Ham)/length(trLabels); PrioriSpam = length(Spam)/length(trLabels);sumDataHam = sum(sum(trData(Ham,:)));pHamOriginal = sum(trData(Ham,:)) / sumDataHam; #prototipo de HAMsumDataSpam = sum(sum(trData(Spam,:))); pSpamOriginal = sum(trData(Spam,:)) / sumDataSpam; #Prototipo de SPAMfor i = init:fin  #suavizado pHam  e = 10^-i;  pHam = pHamOriginal+e;  pHam = pHam / sum(pHam);  pSpam = pSpamOriginal+e;  pSpam = pSpam / sum(pSpam);  gH = log(pHam)*testData' +log(PrioriHam);  gS = log(pSpam)*testData' +log(PrioriSpam);  t = gH < gS;  correct = testLabels == t';  error = sum(correct==1)/numel(testLabels);  printf("epsilon: %.50f \t  error: %.3f \n",e,1-error)  endfor